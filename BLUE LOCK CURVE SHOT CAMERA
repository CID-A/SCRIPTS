local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- GUI Setup
local gui = Instance.new("ScreenGui")
local mainFrame = Instance.new("Frame")
local curveButton = Instance.new("ImageButton")
local buttonIcon = Instance.new("ImageLabel")

gui.Name = "CurvehxhGUI"
gui.Parent = player:WaitForChild("PlayerGui")
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.ResetOnSpawn = false

mainFrame.Name = "MainFrame"
mainFrame.Parent = gui
mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
mainFrame.Position = UDim2.new(0.09, 704, 0.56, 98)
mainFrame.Size = UDim2.new(0, 80, 0, 14)
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Transparency = 0.8

curveButton.Name = "CurveButton"
curveButton.Parent = mainFrame
curveButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
curveButton.Position = UDim2.new(0.243, 0, 0.345, 0)
curveButton.Size = UDim2.new(0, 50, 0, 50)
curveButton.Image = "rbxassetid://140379822604324" -- Football image
curveButton.BackgroundTransparency = 1
curveButton.BorderSizePixel = 0

buttonIcon.Name = "ButtonIcon"
buttonIcon.Parent = curveButton
buttonIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
buttonIcon.Size = UDim2.new(0, 50, 0, 35)
buttonIcon.Image = "rbxassetid://77130576028106" -- Curve effect icon
buttonIcon.BackgroundTransparency = 1
buttonIcon.BorderSizePixel = 0
buttonIcon.AnchorPoint = Vector2.new(0.5, 0.5)
buttonIcon.Position = UDim2.new(0.5, 0, 0.5, 0)

-- Configuration
local isOnCooldown = false
local BASE_BALL_SPEED = 155 -- Default speed (you can adjust this)
local CURVE_STRENGTH = 10000 -- How much the ball curves
local COOLDOWN_TIME = 0.7 -- Seconds between uses

-- Button animation function
local function animateButton(button)
    local tweenInfo = TweenInfo.new(0.13, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    local scaleUp = {Size = UDim2.new(0, 54, 0, 54)}
    local scaleDown = {Size = UDim2.new(0, 50, 0, 50)}
    
    local scaleUpTween = TweenService:Create(button, tweenInfo, scaleUp)
    scaleUpTween:Play()

    scaleUpTween.Completed:Connect(function()
        local scaleDownTween = TweenService:Create(button, tweenInfo, scaleDown)
        scaleDownTween:Play()
    end)
end

-- Check if player has football
local function hasFootball()
    if not character then return false end

    for _, item in ipairs(character:GetChildren()) do
        if item:IsA("BasePart") or item:IsA("Model") then
            if item.Name == "Football" then
                return true
            end
        end
    end
    return false
end

curveButton.MouseButton1Down:Connect(function()
    animateButton(curveButton)

    if isOnCooldown then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Cooldown!",
            Text = "Wait before curving again",
            Duration = 0.7,
        })
        return
    end

    if not hasFootball() then
        game.StarterGui:SetCore("SendNotification", {
            Title = "No Football!",
            Text = "You need a football to curve",
            Duration = 0.7,
        })
        return
    end

    isOnCooldown = true
    animateButton(curveButton)

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local football = workspace:FindFirstChild("Football")
    local hitbox = football and football:FindFirstChild("Hitbox")

    -- Play animation
    local ANIMATION_ID = "18668827116" -- Blue Lock shooting animation
    local humanoid = character:WaitForChild("Humanoid")
    local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. ANIMATION_ID
    
    -- Stop any existing animation
    for _, track in pairs(animator:GetPlayingAnimationTracks()) do
        if track.Animation.AnimationId == animation.AnimationId then
            track:Stop()
        end
    end
    
    local animationTrack = animator:LoadAnimation(animation)
    animationTrack.Priority = Enum.AnimationPriority.Action4
    animationTrack:Play()

    -- Shoot the ball after delay
    task.wait(0.15)
    
    local shootArgs = {
        [1] = BASE_BALL_SPEED, -- This controls the initial speed of the shot
    }

    local ballService = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("BallService")
    if ballService then
        ballService.RE.Shoot:FireServer(unpack(shootArgs))
    else
        warn("BallService not found!")
        isOnCooldown = false
        return
    end

    -- Apply curve effect
    task.wait(0.277) -- Timing for when the ball is in air
    
    football = workspace:FindFirstChild("Football")
    hitbox = football and football:FindFirstChild("Hitbox")

    if not hitbox then
        warn("No hitbox found")
        isOnCooldown = false
        return
    end

    -- Physics manipulation for curve effect
    local maxForce = Vector3.new(CURVE_STRENGTH, 0, CURVE_STRENGTH)
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = maxForce
    bodyVelocity.Parent = hitbox

    local effectDuration = 0.5 -- How long the curve effect lasts
    local curveApplied = false
    local cleanupConnection

    -- Cleanup if hitbox disappears
    task.spawn(function()
        while not curveApplied do
            task.wait(0.1)
            if not hitbox or not hitbox.Parent or not hitbox:IsDescendantOf(workspace) then
                bodyVelocity:Destroy()
                curveApplied = true
                if cleanupConnection then cleanupConnection:Disconnect() end
            end
        end
    end)

    -- Apply curve physics
    local startTime = tick()
    local currentCurve = 0
    local curveIncrement = 0.0777
    local maxCurve = 0

    cleanupConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if tick() - startTime > effectDuration then
            curveApplied = true
            bodyVelocity:Destroy()
            cleanupConnection:Disconnect()
            return
        end

        local lookVector = rootPart.CFrame.LookVector
        currentCurve = math.min(currentCurve + curveIncrement, maxCurve)
        local curveVector = lookVector * currentCurve

        -- This is where the ball's movement is controlled
        bodyVelocity.Velocity = (lookVector * BASE_BALL_SPEED) + curveVector
    end)

    -- Reset cooldown
    task.delay(COOLDOWN_TIME, function()
        isOnCooldown = false
    end)
end)
